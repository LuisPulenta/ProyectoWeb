@page "/asignacionesOTs"

@inject IRepository repository
@inject SweetAlertService sweetAlertService

@inject IJSRuntime _jsServicio
@using ClosedXML.Excel;

<h3>Asignaciones</h3>

<div class="contenedor">
    @if (months.Count > 0)
    {

        <label class="m-2">Contraseña: </label>
        <input type="password" name="password" @bind="password" />

        <label class="m-2">Mes: </label>

        <div>
            <select class="form-select" @bind="month">
                <option value="0">-- Seleccione un Mes --</option>
                @if (months is not null)
                {
                    @foreach (var mes in months)
                    {
                        <option value="@mes.Nromes">@mes.NombreMes</option>
                    }
                }
            </select>
        </div>
    }

    @if (years!.Count > 0)
    {
        <label class="m-2">Año: </label>
        <div>
            <select class="form-select" @bind="year">
                <option value="0">-- Seleccione un Año --</option>
                @if (years is not null)
                {
                    @foreach (var anio in years)
                    {
                        <option value="@anio">@anio</option>
                    }
                }
            </select>
        </div>
    }

    <button type="button" class="btn btn-outline-primary mx-lg-2" @onclick="GetData"><i class="oi oi-layers" /> Traer Datos</button>
    <button type="button" class="btn btn-outline-primary mx-lg-2" @onclick="SaveExcel"><i class="oi oi-layers" /> Grabar a Excel</button>

</div>

@if (CantAsignacionesOTs > 0)
{
    <p>Cantidad de Asignaciones: @CantAsignacionesOTs</p>
}


    

@if (AsignacionesOTs is null && !isLoading)
{
    <p class="fw-bold align-content-center mt-5 h3 text-danger">No hay datos todavía</p>
}
else if (isLoading)
{
    <div>
        <div class="spinner" />
        Espere por favor...
    </div>
    
}
else
{
    <GenericList MyList="AsignacionesOTs">
        <Body>
            <table class="table table-striped">
                <thead class="mithead">
                    <tr>
                        <th class="mith">IDREGISTRO</th>
                        <th class="mith">RECUPIDJOBCARD</th>
                        <th class="mith">CLIENTE</th>
                        <th class="mith">NOMBRE</th>
                        <th class="mith">DECO1</th>
                        <th class="mith">ESTADO3</th>
                        <th class="mith">PasaDefinitiva</th>
                        <th class="mith">LoteNro</th>
                        <th class="mith">InformadaWS</th>
                        <th class="mith">CodigoCierre</th>
                        <th class="mith">FECHACAPTURA</th>
                        <th class="mith">HsCumplidaTime</th>
                        <th class="mith">FechaEvento1</th>
                        <th class="mith">Evento1</th>
                    </tr>
                </thead>
                <tbody class="small">
                    @foreach (var asignacion in AsignacionesOTs!)
                    {
                        <tr class="small">
                            <td class="mitr"> @asignacion.IDREGISTRO</td>
                            <td class="mitr"> @asignacion.RECUPIDJOBCARD</td>
                            <td class="mitr"> @asignacion.CLIENTE</td>
                            <td class="mitr"> @asignacion.NOMBRE</td>
                            <td class="mitr"> @asignacion.DECO1</td>
                            <td class="mitr"> @asignacion.ESTADO3</td>
                            <td class="mitr"> @asignacion.PasaDefinitiva</td>
                            <td class="mitr"> @asignacion.LoteNro</td>
                            <td class="mitr"> @asignacion.InformadaWS</td>
                            <td class="mitr"> @asignacion.CodigoCierre</td>
                            <td class="mitr"> @asignacion.FECHACAPTURA</td>
                            <td class="mitr"> @asignacion.HsCumplidaTime</td>
                            <td class="mitr"> @asignacion.FechaEvento1</td>
                            <td class="mitr"> @asignacion.Evento1</td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

        
@code {
    private string password = "";
    private bool isLoading = false;
    private int month = new();
    private int year = new();
    private List<int>? years = new();
    private List<MonthModel> months = new();

    public List<AsignacionesOT>? AsignacionesOTs { get; set; }
    public int? CantAsignacionesOTs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Load();
    }

    private void Load()
    {
        var actualYear = DateTime.Now.Year;
        years!.Add(actualYear - 2);
        years.Add(actualYear - 1);
        years.Add(actualYear);

        months.Add(new MonthModel() { Nromes = 1, NombreMes = "Enero" });
        months.Add(new MonthModel() { Nromes = 2, NombreMes = "Febrero"});
        months.Add(new MonthModel() { Nromes = 3, NombreMes = "Marzo" });
        months.Add(new MonthModel() { Nromes = 4, NombreMes = "Abril" });
        months.Add(new MonthModel() { Nromes = 5, NombreMes = "Mayo" });
        months.Add(new MonthModel() { Nromes = 6, NombreMes = "Junio" });
        months.Add(new MonthModel() { Nromes = 7, NombreMes = "Julio" });
        months.Add(new MonthModel() { Nromes = 8, NombreMes = "Agosto" });
        months.Add(new MonthModel() { Nromes = 9, NombreMes = "Setiembre" });
        months.Add(new MonthModel() { Nromes = 10, NombreMes = "Octubre" });
        months.Add(new MonthModel() { Nromes = 11, NombreMes = "Noviembre" });
        months.Add(new MonthModel() { Nromes = 12, NombreMes = "Diciembre" });
    }

    private async Task GetData()
    {

        if (password.ToLower() != "test")
        {
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Contraseña INCORRECTA!!!");
            return;
        }

        if (month==0)
        {
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debe seleccionar un Mes.");
            return;
        }

        if (year == 0)
        {
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debe seleccionar un Año.");
            return;
        }



        try
        {
            isLoading = true;
            CantAsignacionesOTs = null;
            var responseHttp = await repository.Get<List<AsignacionesOT>>($"/api/asignacionesots/detail/{month}/{year}");
            AsignacionesOTs = responseHttp.Response;
            var responseHttp2 = await repository.Get<int>($"/api/asignacionesots/count/{month}/{year}");
            CantAsignacionesOTs = responseHttp2.Response;
            isLoading = false;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SaveExcel()
    {

        if (AsignacionesOTs is null || AsignacionesOTs!.Count < 1)
        {
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "No hay Registros para bajar a Excel");
            return;
        }


        using (var libro = new XLWorkbook())
        {
            IXLWorksheet hoja = libro.Worksheets.Add("Asignaciones");
            hoja.Cell(1, 1).Value = "IDREGISTRO";
            hoja.Cell(1, 2).Value = "RECUPIDJOBCARD";
            hoja.Cell(1, 3).Value = "CLIENTE";
            hoja.Cell(1, 4).Value = "NOMBRE";
            hoja.Cell(1, 5).Value = "DECO1";
            hoja.Cell(1, 6).Value = "PasaDefinitiva";
            hoja.Cell(1, 7).Value = "LoteNro";
            hoja.Cell(1, 8).Value = "InformadaWS";
            hoja.Cell(1, 9).Value = "CodigoCierre";
            hoja.Cell(1, 10).Value = "FECHACAPTURA";
            hoja.Cell(1, 11).Value = "HsCumplidaTime";
            hoja.Cell(1, 12).Value = "FechaEvento1";
            hoja.Cell(1, 13).Value = "Evento1";

            for (int fila = 1; fila <= AsignacionesOTs!.Count; fila++)
            {
                hoja.Cell(fila + 1, 1).Value = AsignacionesOTs[fila - 1].IDREGISTRO;
                hoja.Cell(fila + 1, 2).Value = AsignacionesOTs[fila - 1].RECUPIDJOBCARD;
                hoja.Cell(fila + 1, 3).Value = AsignacionesOTs[fila - 1].CLIENTE;
                hoja.Cell(fila + 1, 4).Value = AsignacionesOTs[fila - 1].NOMBRE;
                hoja.Cell(fila + 1, 5).Value = AsignacionesOTs[fila - 1].DECO1;
                hoja.Cell(fila + 1, 6).Value = AsignacionesOTs[fila - 1].PasaDefinitiva;
                hoja.Cell(fila + 1, 7).Value = AsignacionesOTs[fila - 1].LoteNro;
                hoja.Cell(fila + 1, 8).Value = AsignacionesOTs[fila - 1].InformadaWS;
                hoja.Cell(fila + 1, 9).Value = AsignacionesOTs[fila - 1].CodigoCierre;
                hoja.Cell(fila + 1, 10).Value = AsignacionesOTs[fila - 1].FECHACAPTURA;
                hoja.Cell(fila + 1, 11).Value = AsignacionesOTs[fila - 1].HsCumplidaTime;
                hoja.Cell(fila + 1, 12).Value = AsignacionesOTs[fila - 1].FechaEvento1;
                hoja.Cell(fila + 1, 13).Value = AsignacionesOTs[fila - 1].Evento1;
            }
            using (var memoria = new MemoryStream())
            {
                libro.SaveAs(memoria);
                var nombreExcel = string.Concat("Asignaciones-", month.ToString(), "-", year.ToString(), ".xlsx");

                await _jsServicio.InvokeAsync<object>(
                    "DescargarExcel",
                    nombreExcel,
                    Convert.ToBase64String(memoria.ToArray())
                );
            }
        }
    }
}
